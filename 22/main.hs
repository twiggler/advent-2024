import Data.Bits (shiftL, shiftR, xor)
import Parsing (readLines)
import System.Environment (getArgs)

readCodes :: FilePath -> IO [Int]
readCodes = fmap (fmap read) . readLines

evolve :: Int -> Int
evolve s0 =
  let magic = 16777216
      s1 = (s0 `shiftL` 6 `xor` s0) `mod` magic
      s2 = (s1 `shiftR` 5 `xor` s1) `mod` magic
   in (s2 `shiftL` 11 `xor` s2) `mod` magic

solve1 :: [Int] -> Int
solve1 = sum . fmap generate
  where
    generate seed = iterate evolve seed !! 2000

main :: IO ()
main = do
  (filePath : _) <- getArgs
  codes <- readCodes filePath
  putStrLn $ "Sum of 2000th secret number generated by each buyer: " ++ show (solve1 codes)
